package com.xraybot.task;

import com.xraybot.service.UserRegistry;
import com.xraybot.service.XrayApiService;
import com.xraybot.service.XrayApiService.Client;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.bots.AbsSender;

import java.time.Instant;
import java.util.List;

@Component
public class NotificationScheduler {

    private static final Logger log = LoggerFactory.getLogger(NotificationScheduler.class);
    private final XrayApiService xrayApiService;
    private final UserRegistry userRegistry;
    private final AbsSender bot;
    private final int inboundId = 2;

    public NotificationScheduler(XrayApiService xrayApiService,
                                 UserRegistry userRegistry,
                                 AbsSender bot) {
        this.xrayApiService = xrayApiService;
        this.userRegistry = userRegistry;
        this.bot = bot;
    }

    @Scheduled(cron = "${xray.cron.expiry-check}")
    public void sendExpiryNotifications() {
        log.info("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è...");

        try {
            boolean loggedIn = xrayApiService.login();
            if (!loggedIn) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ 3X-UI");
                return;
            }

            List<Client> clients = xrayApiService.getClients(inboundId);
            long now = Instant.now().getEpochSecond();

            for (Client client : clients) {
                if (client.expiryTime() == 0) {
                    // –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue;
                }

                long expirySeconds  = client.expiryTime() / 1000;
                long secondsLeft = expirySeconds - now;
                long daysLeft = secondsLeft / (60 * 60 * 24);

                if (daysLeft <= 2) {
                    String email = client.email();
                    Long chatId = userRegistry.getChatId(email);

                    if (chatId != null) {
                        String text = String.format(
                                "üîî –í–∞—à –¥–æ—Å—Ç—É–ø –ø–æ –∫–ª—é—á—É [%s] –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ %d –¥–Ω.\n" +
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.",
                                email, Math.max(daysLeft, 0)
                        );

                        SendMessage message = new SendMessage();
                        message.setChatId(chatId.toString());
                        message.setText(text);

                        bot.execute(message);
                        log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {} (chatId={})", email, chatId);
                    } else {
                        log.info("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω chatId ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª /start", email);
                    }
                }
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", e);
        }
    }
}
