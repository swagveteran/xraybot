package com.xraybot.bot;

import com.xraybot.config.XrayProperties;
import com.xraybot.service.UserRegistry;
import com.xraybot.service.XrayApiService;
import jakarta.annotation.PostConstruct;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.time.Instant;
import java.util.List;

@Component
public class NotifyBot extends TelegramLongPollingBot {

    private final String botUsername;
    private final String botToken;
    private final UserRegistry userRegistry;
    private final XrayApiService xrayApiService;

    public NotifyBot(XrayProperties properties, UserRegistry userRegistry, XrayApiService xrayApiService) {
        this.botUsername = properties.getBotUsername();
        this.botToken = properties.getBotToken();
        this.userRegistry = userRegistry;
        this.xrayApiService = xrayApiService;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage()) {
            Message msg = update.getMessage();
            if (msg.hasText()) {
                String text = msg.getText();
                long chatId = msg.getChatId();
                String username = msg.getFrom().getUserName();

                if (text.equals("/start")) {
                    if (username == null || username.isEmpty()) {
                        sendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram, —á—Ç–æ–±—ã —è –º–æ–≥ –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.");
                        return;
                    }


                    userRegistry.registerUser(username, chatId);
                    sendMessage(chatId, "–ü—Ä–∏–≤–µ—Ç, @" + username + "! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n\n" +
                            BotCommandRegistry.asHelpText());

                } else if (text.equals("/status")) {
                    if (username == null || username.isEmpty()) {
                        sendMessage(chatId, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à username. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ Telegram.");
                        return;
                    }

                    try {
                        boolean loggedIn = xrayApiService.login();
                        if (!loggedIn) {
                            sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª–∏ 3X-UI.");
                            return;
                        }

                        XrayApiService.Client client = xrayApiService.getClientTraffic(username.toLowerCase());

                        if (client == null) {
                            sendMessage(chatId, "–ö–ª–∏–µ–Ω—Ç —Å –∏–º–µ–Ω–µ–º " + username + " –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                            return;
                        }

                        StringBuilder sb = new StringBuilder();
                        sb.append("üìä –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ `").append(username).append("`\n");

                        String status = client.enable() ? "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" : "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω";
                        sb.append("üîê –ö–ª—é—á: ").append(status).append("\n");

                        if (client.expiryTime() == 0) {
                            sb.append("‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω").append("\n");
                        } else {
                            long daysLeft = (client.expiryTime() / 1000 - Instant.now().getEpochSecond()) / (60 * 60 * 24);
                            sb.append("‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: ").append(Math.max(daysLeft, 0)).append(" –¥–Ω.").append("\n");
                        }

                        sb.append("üîÅ –ü–µ—Ä–µ–¥–∞–Ω–æ:\n");
                        sb.append("  ‚¨ÜÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ").append(humanReadableBytes(client.up())).append("\n");
                        sb.append("  ‚¨áÔ∏è –ü–æ–ª—É—á–µ–Ω–æ: ").append(humanReadableBytes(client.down())).append("\n");

                        SendMessage message = new SendMessage();
                        message.setChatId(Long.toString(chatId));
                        message.setText(sb.toString());
                        message.setParseMode("Markdown");

                        execute(message);

                    } catch (Exception e) {
                        sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.");
                        e.printStackTrace();
                    }
                } else if (text.equals("/help")) {
                    sendMessage(chatId, BotCommandRegistry.asHelpText());
                } else {
                    sendMessage(chatId, "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã /start, /status –∏ /help.");
                }
            }
        }
    }

    @PostConstruct
    public void initCommands() {
        try {
            execute(new SetMyCommands(BotCommandRegistry.asTelegramCommandList(), null, null));
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(Long.toString(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String humanReadableBytes(long bytes) {
        int unit = 1024;
        if (bytes < unit) return bytes + " B";
        int exp = (int) (Math.log(bytes) / Math.log(unit));
        String pre = "KMGTPE".charAt(exp - 1) + "i";
        return String.format("%.1f %sB", bytes / Math.pow(unit, exp), pre);
    }
}
